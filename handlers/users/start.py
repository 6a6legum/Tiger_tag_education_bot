from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from states.user_info import IntroTest, IntroTestUser, IntroTestOperator, IntroTestAdmin
from loader import dp, bot
from data_base import sqlite_db
# from keyboards.default import change_data
from utils.check_authorization import auth

@dp.message_handler(CommandStart(), state='*')
@auth
async def bot_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –Ω–∞ –Ω–∞—à–µ–º –∫—É—Ä—Å–µ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! üëãüèª\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª –ø—Ä–æ—Å–∏–º —Ç–µ–±—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É.")
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await IntroTest.name.set()
    # await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!")




@dp.message_handler(state=IntroTest.name)
async def answer_q1(message: types.Message, state: FSMContext):
    user = types.User.get_current()
    chat_id = user.id
    await state.update_data(id=chat_id)
    answer = message.text
    await state.update_data(name=answer)
    # async with state.proxy() as data:
    #     data["name"] = answer
    start_buttons = ["1", "2", "3"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer("–ö –∫–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—ã –±—ã —Å–µ–±—è –æ—Ç–Ω—ë—Å?\n 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n 2. –û–ø–µ—Ä–∞—Ç–æ—Ä\n 3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=keyboard)

    await IntroTest.categoryWorker.set()


@dp.message_handler(state=IntroTest.categoryWorker)
async def answer_q2(message: types.Message, state: FSMContext):
    if message.text=="1" or message.text=="2" or message.text=="3":
        await state.update_data(category=message.text)
        start_buttons = ["–î–∞", "–ù–µ—Ç"]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(*start_buttons)
        await message.answer("–•–æ—Ç–µ–ª –ª–∏ —Ç—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=keyboard)
        await IntroTest.recieveNews.set()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        start_buttons = ["1", "2", "3"]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(*start_buttons)

        await message.answer(
            "–ö –∫–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—ã –±—ã —Å–µ–±—è –æ—Ç–Ω—ë—Å?\n 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n 2. –û–ø–µ—Ä–∞—Ç–æ—Ä\n 3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            reply_markup=keyboard)

        await IntroTest.categoryWorker.set()

    # data = await state.get_data()
    # name = data.get("name")



@dp.message_handler(state=IntroTest.recieveNews)
async def answer_q3(message: types.Message, state: FSMContext):
    if message.text=="–î–∞" or message.text=="–ù–µ—Ç":
        await state.update_data(recieve=message.text)
        await state.update_data(intro_test=0)
        # data = await state.get_data()
        # name = data.get("name")

        start_buttons = ["–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ‚ùóÔ∏è"]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(*start_buttons)
        try:
            await sqlite_db.sql_add_command(state)
            await state.finish()
            await message.answer(
                "–û—Ç–ª–∏—á–Ω–æ. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!",
                reply_markup=keyboard)

            video = open("agutin.gif", 'rb')
            await bot.send_video((types.User.get_current()).id, video)

            user = types.User.get_current()
            chat_id = user.id
            db_row = await sqlite_db.sql_read(chat_id)
            category = db_row[0][2]
            if category == "1":
                await IntroTestUser.q0.set()
            if category == "2":
                await IntroTestOperator.q0.set()
            if category == "3":
                await IntroTestAdmin.q0.set()
            # await message.answer(
            #     "–û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!",
            #     reply_markup=keyboard)
        except:
            change_data = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–î–∞"),
                        KeyboardButton(text="–ù–µ—Ç"),
                    ],
                ],
                resize_keyboard=True
            )
            await message.answer("–¢—ã —É–∂–µ –≤–≤–æ–¥–∏–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –∏—Ö –ø–æ–º–µ–Ω—è—Ç—å?", reply_markup=change_data)
            await IntroTest.changeData.set()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        start_buttons = ["–î–∞", "–ù–µ—Ç"]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(*start_buttons)
        await message.answer("–•–æ—Ç–µ–ª –ª–∏ —Ç—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=keyboard)
        await IntroTest.recieveNews.set()

        #–°–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞/–Ω–µ—Ç
    # await message.answer(name+" "+category +" "+ recieve+" ")
    # await state.finish()
    # await message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!",
    #                      reply_markup=keyboard)

@dp.message_handler(text="–î–∞", state=IntroTest.changeData)
async def change_data(message: types.Message, state: FSMContext):
    data = await state.get_data()
    id = data.get("id")
    await sqlite_db.sql_update_users(state, id)
    start_buttons = ["–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ‚ùóÔ∏è"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*start_buttons)
    await message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!", reply_markup=keyboard)
    video =  open("agutin.gif", 'rb')
    await bot.send_video((types.User.get_current()).id, video)

    user = types.User.get_current()
    chat_id = user.id
    db_row = await sqlite_db.sql_read(chat_id)
    category = db_row[0][2]
    if category == "1":
        await IntroTestUser.q0.set()
    if category == "2":
        await IntroTestOperator.q0.set()
    if category == "3":
        await IntroTestAdmin.q0.set()


@dp.message_handler(text="–ù–µ—Ç", state=IntroTest.changeData)
async def change_data(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å–µ!", reply_markup=ReplyKeyboardRemove())


# @dp.message_handler(text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ‚ùóÔ∏è")
# async def start_test(message: types.Message):
#     user = types.User.get_current()
#     chat_id = user.id
#     db_row = await sqlite_db.sql_read(chat_id)
#     category = db_row[0][2]
#     if category=="1":
#
#     # await message.answer("–û—Ç–ª–∏—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å–µ!", reply_markup=ReplyKeyboardRemove())