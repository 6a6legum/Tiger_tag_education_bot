from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from states.main_program import MainProgramGeneral
from loader import dp, bot
from data_base import sqlite_db
from utils.check_authorization import auth

@dp.message_handler(state=MainProgramGeneral.welcome)
async def before_questions(message: types.Message,  state: FSMContext):
    await  message.answer("–°–µ–π—á–∞—Å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. \n‚ö´ –í–æ-–ø–µ—Ä–≤—ã—Ö, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –æ–±—É—á–∞—é—â–∏–µ —É—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –Ω–∞—É—á–∏—à—å—Å—è –Ω–∞–≤—ã–∫–∞–º –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                          + "\n‚ö´ –í–æ-–≤—Ç–æ—Ä—ã—Ö, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑—ã –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. \n‚ö´ –ù–∞–∫–æ–Ω–µ—Ü, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–•–æ—á—É —É—Ä–æ–∫–∏üìö"),
            ],
            [
                KeyboardButton(text="–•–æ—á—É –∫–≤–∏–∑—ãüìÉ"),
            ],
            [
                KeyboardButton(text="–•–æ—á—É –∫–µ–π—Å—ãüß≥"),
            ],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–ß—Ç–æ —Ç–µ–±–µ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
    await MainProgramGeneral.waitingForAnswer.set()

@dp.message_handler(text="–•–æ—á—É —É—Ä–æ–∫–∏üìö", state="*")
@auth
async def start_lesson(message: types.Message):
    user = types.User.get_current()
    chat_id = user.id
    db_row = await sqlite_db.sql_read(chat_id)
    category = db_row[0][2]
    start_buttons = ["–ü–æ–µ—Ö–∞–ª–∏ üöë"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer(
        "–ß—Ç–æ–±—ã —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –¥–æ—Ä–æ–≥–µ —Ç–µ–±–µ –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ —Ç–µ–æ—Ä–∏—è. –°–µ–π—á–∞—Å —Ç—ã –ø—Ä–µ–∏—Å–ø–æ–ª–Ω–∏—à—å—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.",
        reply_markup=keyboard)
    if category == "1":
        await MainProgramGeneral.lesson_welcome_user.set()
    if category == "2":
        await MainProgramGeneral.lesson_welcome_operator.set()
    if category == "3":
        await MainProgramGeneral.lesson_welcome_admin.set()


@dp.message_handler(text="–•–æ—á—É –∫–≤–∏–∑—ãüìÉ", state="*")
@auth
async def start_quiz(message: types.Message):
    user = types.User.get_current()
    chat_id = user.id
    db_row = await sqlite_db.sql_read(chat_id)
    category = db_row[0][2]
    start_buttons = ["–ü–æ–≥–Ω–∞–ª–∏ üöó"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer("–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ä–µ–≥—É–ª–∏—Ä—É–µ—à—å –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è –Ω–∞ –¥–æ—Ä–æ–≥–µ. –û—Ç–≤–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ä–µ—à–∏ –≤—Å–µ –æ–±—Ä–∞–∑–æ–≤–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã!", reply_markup=keyboard)
    if category == "1":
        await MainProgramGeneral.quiz_welcome_user.set()
    if category == "2":
        await MainProgramGeneral.quiz_welcome_operator.set()
    if category == "3":
        await MainProgramGeneral.quiz_welcome_admin.set()


@dp.message_handler(text="–•–æ—á—É –∫–µ–π—Å—ãüß≥", state="*")
@auth
async def start_cases(message: types.Message):
    user = types.User.get_current()
    chat_id = user.id
    db_row = await sqlite_db.sql_read(chat_id)
    category = db_row[0][2]
    start_buttons = ["–ü–æ–º—á–∞–ª–∏—Å—å üöé"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer(
        "–ß—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è –Ω–∞ –¥–æ—Ä–æ–≥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—å—Å—è –∏ –Ω–∞ –æ—à–∏–±–∫–∞—Ö –¥—Ä—É–≥–∏—Ö. –°–µ–π—á–∞—Å —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –∏–∑ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!",
        reply_markup=keyboard)
    if category == "1":
        await MainProgramGeneral.cases_welcome_user.set()
    if category == "2":
        await MainProgramGeneral.cases_welcome_operator.set()
    if category == "3":
        await MainProgramGeneral.cases_welcome_admin.set()


@dp.message_handler(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é‚¨Ö", state="*")
@auth
async def start_again(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–•–æ—á—É —É—Ä–æ–∫–∏üìö"),
            ],
            [
                KeyboardButton(text="–•–æ—á—É –∫–≤–∏–∑—ãüìÉ"),
            ],
            [
                KeyboardButton(text="–•–æ—á—É –∫–µ–π—Å—ãüß≥"),
            ],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–ß—Ç–æ —Ç–µ–±–µ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
    await MainProgramGeneral.waitingForAnswer.set()
